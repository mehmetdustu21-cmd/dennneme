// Prisma Schema - Virtual Try-On App
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Session tablosu (Shopify OAuth için gerekli)
model Session {
  id            String    @id
  shop          String
  state         String
  isOnline      Boolean   @default(false)
  scope         String?
  expires       DateTime?
  accessToken   String
  userId        String?
  firstName     String?
  lastName      String?
  email         String?
  accountOwner  Boolean   @default(false)
  locale        String?
  collaborator  Boolean?  @default(false)
  emailVerified Boolean?  @default(false)
}

// Shop bilgileri ve krediler
model Shop {
  id                String   @id @default(cuid())
  shop              String   @unique // example.myshopify.com
  
  // Subscription & Credits
  plan              String   @default("free") // free, basic, pro, enterprise
  credits           Int      @default(0)
  totalCreditsUsed  Int      @default(0)
  
  // Subscription details
  subscriptionId    String?  // Shopify recurring charge ID
  planPrice         Float?
  billingCycle      String?  // monthly, annual
  trialEndsAt       DateTime?
  
  // App settings
  active            Boolean  @default(true)
  installedAt       DateTime @default(now())
  uninstalledAt     DateTime?
  
  // Metadata
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  
  // Relations
  generations       Generation[]
  creditPurchases   CreditPurchase[]
  
  @@index([shop])
}

// Virtual Try-On Generations (API kullanımları)
model Generation {
  id              String   @id @default(cuid())
  shopId          String
  shop            Shop     @relation(fields: [shopId], references: [id], onDelete: Cascade)
  
  // Customer & Product info
  customerId      String?  // Shopify customer ID (optional)
  productId       String   // Shopify product ID
  variantId       String?  // Shopify variant ID
  
  // Generation details
  status          String   @default("pending") // pending, processing, completed, failed
  customerImage   String   // URL of customer's uploaded photo
  resultImage     String?  // URL of generated try-on result
  
  // API details
  apiProvider     String   @default("fal") // fal, replicate, etc.
  apiCost         Float    // Cost per generation ($0.05)
  creditsUsed     Int      @default(1)
  
  // Error handling
  errorMessage    String?
  retryCount      Int      @default(0)
  
  // Timestamps
  createdAt       DateTime @default(now())
  completedAt     DateTime?
  
  @@index([shopId])
  @@index([productId])
  @@index([status])
  @@index([createdAt])
}

// Credit purchases (one-time buys)
model CreditPurchase {
  id              String   @id @default(cuid())
  shopId          String
  shop            Shop     @relation(fields: [shopId], references: [id], onDelete: Cascade)
  
  // Purchase details
  amount          Float    // Amount paid ($10, $50, etc.)
  credits         Int      // Credits purchased
  pricePerCredit  Float    // Effective price per credit
  
  // Shopify billing
  chargeId        String?  @unique // Shopify one-time charge ID
  status          String   @default("pending") // pending, accepted, declined
  
  // Metadata
  createdAt       DateTime @default(now())
  paidAt          DateTime?
  
  @@index([shopId])
  @@index([status])
}

// Custom model images uploaded by merchants
model CustomModel {
  id              String   @id @default(cuid())
  shop            String
  
  // Model details
  name            String
  url             String   // Cloudinary URL
  cloudinaryId    String   // For deletion
  gender          String   @default("male") // male, female, unisex
  
  // Metadata
  active          Boolean  @default(true)
  createdAt       DateTime @default(now())
  
  @@index([shop])
}

// Theme settings for virtual try-on widget
model ThemeSettings {
  id              String   @id @default(cuid())
  shop            String   @unique
  
  // Color settings
  primaryColor    String   @default("#000000")
  secondaryColor  String   @default("#ffffff")
  backgroundColor String   @default("#f9f9f9")
  borderColor     String   @default("#e5e5e5")
  
  // Layout settings
  borderRadius    Int      @default(4)
  showBorder      Boolean  @default(true)
  backgroundType  String   @default("white") // transparent, white, theme_color, custom
  fontSize        Int      @default(14)
  
  // Metadata
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  
  @@index([shop])
}