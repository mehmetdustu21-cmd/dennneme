{% schema %}
{
  "name": "Virtual Try-On",
  "target": "section",
  "settings": [
    {
      "type": "text",
      "id": "button_text",
      "label": "Button Text",
      "default": "TRY IT ON"
    },
    {
      "type": "color",
      "id": "button_color",
      "label": "Button Color",
      "default": "#000000"
    }
  ]
}
{% endschema %}

<div class="virtual-tryon-container">
  <button class="virtual-tryon-button" id="virtualTryonBtn">
    <svg width="20" height="20" viewBox="0 0 24 24" fill="none">
      <path d="M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm0 18c-4.41 0-8-3.59-8-8s3.59-8 8-8 8 3.59 8 8-3.59 8-8 8z" fill="currentColor"/>
      <circle cx="12" cy="12" r="3" fill="currentColor"/>
    </svg>
    {{ block.settings.button_text }}
  </button>
</div>

<div id="virtualTryonModal" class="vto-modal">
  <div class="vto-modal-content">
    <div class="vto-modal-header">
      <h2>Virtual Try-On</h2>
      <button class="vto-close" id="closeModal">&times;</button>
    </div>
    
    <div class="vto-modal-body">
      <!-- Browse Panel -->
      <div class="vto-panel" id="browsePanel">
        <div class="vto-gender-tabs">
          <button class="vto-tab active" data-gender="all">All</button>
          <button class="vto-tab" data-gender="male">Male</button>
          <button class="vto-tab" data-gender="female">Female</button>
        </div>
        
        <div class="vto-models-grid" id="modelsGrid"></div>
        
        <div class="vto-upload-section">
          <button class="vto-upload-btn" id="uploadBtn">
            <svg width="24" height="24" viewBox="0 0 24 24" fill="none">
              <path d="M12 4v16m8-8H4" stroke="currentColor" stroke-width="2" stroke-linecap="round"/>
            </svg>
            Upload Your Photo
          </button>
          <input type="file" id="photoUpload" accept="image/*" style="display: none;">
        </div>
      </div>
      
      <!-- Result Panel -->
      <div class="vto-panel" id="resultPanel" style="display: none;">
        <div class="vto-result-header">
          <button class="vto-back-btn" id="backBtn">← Back</button>
          <div class="vto-result-actions">
            <button class="vto-action-btn" id="downloadBtn">Download</button>
            <button class="vto-action-btn vto-action-primary" id="addToCartBtn">Add to Cart</button>
          </div>
        </div>
        
        <div class="vto-comparison">
          <div class="vto-image-container">
            <img id="originalImage" class="vto-result-image">
            <div class="vto-image-label">Original Model</div>
          </div>
          <div class="vto-image-container">
            <img id="generatedImage" class="vto-result-image">
            <div class="vto-image-label">With Product</div>
          </div>
        </div>
      </div>
      
      <!-- Loading State -->
      <div class="vto-loading" id="loadingState" style="display: none;">
        <div class="vto-spinner"></div>
        <p id="loadingText">Creating your virtual try-on...</p>
        <p class="vto-loading-subtext">This may take 10-20 seconds</p>
      </div>

      <!-- Error State -->
      <div class="vto-error" id="errorState" style="display: none;">
        <div class="vto-error-icon">⚠️</div>
        <h3>Generation Failed</h3>
        <p id="errorMessage"></p>
        <button class="vto-action-btn" id="retryBtn">Try Again</button>
      </div>
    </div>
  </div>
</div>

<style>
.virtual-tryon-container {
  margin: 20px 0;
}

.virtual-tryon-button {
  display: inline-flex;
  align-items: center;
  gap: 8px;
  padding: 12px 24px;
  background: {{ block.settings.button_color }};
  color: white;
  border: none;
  border-radius: 8px;
  font-size: 16px;
  font-weight: 600;
  cursor: pointer;
  transition: transform 0.2s, box-shadow 0.2s;
}

.virtual-tryon-button:hover {
  transform: translateY(-2px);
  box-shadow: 0 4px 12px rgba(0,0,0,0.15);
}

.vto-modal {
  display: none;
  position: fixed;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  background: rgba(0,0,0,0.7);
  z-index: 10000;
  backdrop-filter: blur(4px);
}

.vto-modal.active {
  display: flex;
  align-items: center;
  justify-content: center;
}

.vto-modal-content {
  background: white;
  border-radius: 16px;
  width: 90%;
  max-width: 1000px;
  max-height: 90vh;
  overflow: hidden;
  box-shadow: 0 20px 60px rgba(0,0,0,0.3);
}

.vto-modal-header {
  display: flex;
  justify-content: space-between;
  align-items: center;
  padding: 24px;
  border-bottom: 1px solid #e5e7eb;
}

.vto-modal-header h2 {
  margin: 0;
  font-size: 24px;
  font-weight: 700;
}

.vto-close {
  background: none;
  border: none;
  font-size: 32px;
  cursor: pointer;
  color: #6b7280;
  line-height: 1;
}

.vto-modal-body {
  padding: 24px;
  max-height: calc(90vh - 80px);
  overflow-y: auto;
}

.vto-gender-tabs {
  display: flex;
  gap: 8px;
  margin-bottom: 24px;
}

.vto-tab {
  padding: 8px 24px;
  background: #f3f4f6;
  border: none;
  border-radius: 8px;
  font-weight: 600;
  cursor: pointer;
  transition: all 0.2s;
}

.vto-tab.active {
  background: #000;
  color: white;
}

.vto-models-grid {
  display: grid;
  grid-template-columns: repeat(auto-fill, minmax(150px, 1fr));
  gap: 16px;
  margin-bottom: 24px;
}

.vto-model-card {
  cursor: pointer;
  border-radius: 12px;
  overflow: hidden;
  transition: transform 0.2s, box-shadow 0.2s;
  border: 2px solid transparent;
}

.vto-model-card:hover {
  transform: translateY(-4px);
  box-shadow: 0 8px 24px rgba(0,0,0,0.15);
}

.vto-model-card.selected {
  border-color: #000;
}

.vto-model-image {
  width: 100%;
  height: 200px;
  object-fit: cover;
}

.vto-model-name {
  padding: 12px;
  text-align: center;
  font-weight: 600;
  background: #f9fafb;
}

.vto-upload-section {
  text-align: center;
  padding: 24px;
  background: #f9fafb;
  border-radius: 12px;
}

.vto-upload-btn {
  display: inline-flex;
  align-items: center;
  gap: 8px;
  padding: 12px 24px;
  background: white;
  border: 2px dashed #d1d5db;
  border-radius: 8px;
  font-weight: 600;
  cursor: pointer;
  transition: all 0.2s;
}

.vto-upload-btn:hover {
  border-color: #000;
  background: #f9fafb;
}

.vto-result-header {
  display: flex;
  justify-content: space-between;
  align-items: center;
  margin-bottom: 24px;
}

.vto-back-btn {
  padding: 8px 16px;
  background: #f3f4f6;
  border: none;
  border-radius: 8px;
  font-weight: 600;
  cursor: pointer;
}

.vto-result-actions {
  display: flex;
  gap: 12px;
}

.vto-action-btn {
  padding: 10px 20px;
  border: 2px solid #000;
  border-radius: 8px;
  font-weight: 600;
  cursor: pointer;
  background: white;
  transition: all 0.2s;
}

.vto-action-primary {
  background: #000;
  color: white;
}

.vto-comparison {
  display: grid;
  grid-template-columns: 1fr 1fr;
  gap: 24px;
}

.vto-image-container {
  position: relative;
  border-radius: 12px;
  overflow: hidden;
  background: #f9fafb;
}

.vto-result-image {
  width: 100%;
  height: auto;
  display: block;
}

.vto-image-label {
  position: absolute;
  bottom: 0;
  left: 0;
  right: 0;
  padding: 12px;
  background: linear-gradient(to top, rgba(0,0,0,0.7), transparent);
  color: white;
  font-weight: 600;
  text-align: center;
}

.vto-loading {
  text-align: center;
  padding: 60px 24px;
}

.vto-spinner {
  width: 48px;
  height: 48px;
  border: 4px solid #f3f4f6;
  border-top-color: #000;
  border-radius: 50%;
  animation: spin 1s linear infinite;
  margin: 0 auto 16px;
}

.vto-loading-subtext {
  color: #6b7280;
  font-size: 14px;
  margin-top: 8px;
}

.vto-error {
  text-align: center;
  padding: 60px 24px;
}

.vto-error-icon {
  font-size: 64px;
  margin-bottom: 16px;
}

.vto-error h3 {
  margin: 0 0 12px 0;
  font-size: 24px;
}

.vto-error p {
  color: #6b7280;
  margin-bottom: 24px;
}

@keyframes spin {
  to { transform: rotate(360deg); }
}

@media (max-width: 768px) {
  .vto-models-grid {
    grid-template-columns: repeat(auto-fill, minmax(120px, 1fr));
  }
  
  .vto-comparison {
    grid-template-columns: 1fr;
  }
}
</style>

<script>
(function() {
  const shopDomain = window.location.hostname;
  const proxyBase = `https://${shopDomain}/apps/virtual-tryon`;
  
  const models = [
    { id: 'male-1', name: 'Michael', image: `${proxyBase}/models/male-1.png`, gender: 'male' },
    { id: 'male-2', name: 'James', image: `${proxyBase}/models/male-2.png`, gender: 'male' },
    { id: 'male-3', name: 'David', image: `${proxyBase}/models/male-3.png`, gender: 'male' },
    { id: 'male-4', name: 'Ryan', image: `${proxyBase}/models/male-4.png`, gender: 'male' },
    { id: 'male-5', name: 'Alex', image: `${proxyBase}/models/male-5.png`, gender: 'male' },
    { id: 'female-1', name: 'Emma', image: `${proxyBase}/models/female-1.png`, gender: 'female' },
    { id: 'female-2', name: 'Sophia', image: `${proxyBase}/models/female-2.png`, gender: 'female' },
    { id: 'female-3', name: 'Olivia', image: `${proxyBase}/models/female-3.png`, gender: 'female' },
    { id: 'female-4', name: 'Isabella', image: `${proxyBase}/models/female-4.png`, gender: 'female' },
    { id: 'female-5', name: 'Ava', image: `${proxyBase}/models/female-5.png`, gender: 'female' }
  ];

  let selectedModel = null;
  let currentGender = 'all';
  let currentProductImage = null;
  let currentProductId = null;
  let currentProductType = null;

  const modal = document.getElementById('virtualTryonModal');
  const openBtn = document.getElementById('virtualTryonBtn');
  const closeBtn = document.getElementById('closeModal');
  const modelsGrid = document.getElementById('modelsGrid');
  const browsePanel = document.getElementById('browsePanel');
  const resultPanel = document.getElementById('resultPanel');
  const loadingState = document.getElementById('loadingState');
  const errorState = document.getElementById('errorState');
  const backBtn = document.getElementById('backBtn');
  const uploadBtn = document.getElementById('uploadBtn');
  const photoUpload = document.getElementById('photoUpload');
  const retryBtn = document.getElementById('retryBtn');

  function getCurrentProductInfo() {
    const productImage = document.querySelector('.product__media img')?.src || 
                         document.querySelector('[data-product-featured-image]')?.src ||
                         document.querySelector('.product-single__photo img')?.src;
    const productId = document.querySelector('[data-product-id]')?.dataset?.productId;
    const productType = document.querySelector('[data-product-type]')?.dataset?.productType;
    
    return { productImage, productId, productType };
  }

  openBtn.addEventListener('click', function() {
    const productInfo = getCurrentProductInfo();
    currentProductImage = productInfo.productImage;
    currentProductId = productInfo.productId;
    currentProductType = productInfo.productType;
    
    if (!currentProductImage) {
      alert('Product image not found. Please make sure you are on a product page.');
      return;
    }
    
    modal.classList.add('active');
    renderModels();
  });

  closeBtn.addEventListener('click', () => modal.classList.remove('active'));
  
  modal.addEventListener('click', (e) => {
    if (e.target === modal) modal.classList.remove('active');
  });

  document.querySelectorAll('.vto-tab').forEach(tab => {
    tab.addEventListener('click', function() {
      document.querySelectorAll('.vto-tab').forEach(t => t.classList.remove('active'));
      this.classList.add('active');
      currentGender = this.dataset.gender;
      renderModels();
    });
  });

  function renderModels() {
    const filteredModels = currentGender === 'all' 
      ? models 
      : models.filter(m => m.gender === currentGender);
    
    modelsGrid.innerHTML = filteredModels.map(model => `
      <div class="vto-model-card" data-model-id="${model.id}">
        <img src="${model.image}" alt="${model.name}" class="vto-model-image" 
             onerror="this.src='data:image/svg+xml,%3Csvg xmlns=%27http://www.w3.org/2000/svg%27 width=%27150%27 height=%27200%27%3E%3Crect fill=%27%23f3f4f6%27 width=%27150%27 height=%27200%27/%3E%3Ctext x=%2750%25%27 y=%2750%25%27 text-anchor=%27middle%27 dy=%27.3em%27 fill=%27%239ca3af%27%3E${model.name}%3C/text%3E%3C/svg%3E'">
        <div class="vto-model-name">${model.name}</div>
      </div>
    `).join('');

    document.querySelectorAll('.vto-model-card').forEach(card => {
      card.addEventListener('click', function() {
        document.querySelectorAll('.vto-model-card').forEach(c => c.classList.remove('selected'));
        this.classList.add('selected');
        selectedModel = models.find(m => m.id === this.dataset.modelId);
        generateTryOn();
      });
    });
  }

  uploadBtn.addEventListener('click', () => photoUpload.click());
  
  photoUpload.addEventListener('change', function(e) {
    if (e.target.files.length > 0) {
      const file = e.target.files[0];
      const reader = new FileReader();
      reader.onload = function(event) {
        selectedModel = {
          id: 'custom',
          name: 'Your Photo',
          image: event.target.result,
          gender: 'custom'
        };
        generateTryOn();
      };
      reader.readAsDataURL(file);
    }
  });

  async function generateTryOn() {
    if (!selectedModel || !currentProductImage) return;

    browsePanel.style.display = 'none';
    loadingState.style.display = 'block';
    errorState.style.display = 'none';

    console.log('🎨 Generating virtual try-on...', {
      model: selectedModel.name,
      product: currentProductImage.substring(0, 50) + '...'
    });

    try {
      const response = await fetch(`${proxyBase}/api/generate`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json'
        },
        body: JSON.stringify({
          modelImageUrl: selectedModel.image,
          productImageUrl: currentProductImage,
          productId: currentProductId,
          productType: currentProductType
        })
      });

      const result = await response.json();

      if (!response.ok || !result.success) {
        throw new Error(result.error || 'Generation failed');
      }

      console.log('✅ Generation successful!', result);

      loadingState.style.display = 'none';
      resultPanel.style.display = 'block';
      
      document.getElementById('originalImage').src = selectedModel.image;
      document.getElementById('generatedImage').src = result.imageUrl;

    } catch (error) {
      console.error('❌ Generation error:', error);
      loadingState.style.display = 'none';
      errorState.style.display = 'block';
      document.getElementById('errorMessage').textContent = error.message || 'Something went wrong. Please try again.';
    }
  }

  backBtn.addEventListener('click', function() {
    resultPanel.style.display = 'none';
    browsePanel.style.display = 'block';
  });

  retryBtn.addEventListener('click', function() {
    errorState.style.display = 'none';
    browsePanel.style.display = 'block';
  });

  document.getElementById('downloadBtn')?.addEventListener('click', function() {
    const img = document.getElementById('generatedImage');
    const link = document.createElement('a');
    link.href = img.src;
    link.download = 'virtual-tryon-result.png';
    link.click();
  });

  document.getElementById('addToCartBtn')?.addEventListener('click', function() {
    const form = document.querySelector('form[action*="/cart/add"]');
    if (form) {
      form.submit();
      modal.classList.remove('active');
    }
  });
})();
</script>